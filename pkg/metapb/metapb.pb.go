// Code generated by protoc-gen-go.
// source: metapb.proto
// DO NOT EDIT!

/*
Package metapb is a generated protocol buffer package.

It is generated from these files:
	metapb.proto

It has these top-level messages:
	Cluster
	Node
	Store
	Peer
	Region
*/
package metapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Cluster struct {
	ClusterId *uint64 `protobuf:"varint,1,opt,name=cluster_id" json:"cluster_id,omitempty"`
	// max peer number for a region.
	// pd will do the auto-balance if region peer number mismatches.
	MaxPeerNumber    *uint32 `protobuf:"varint,2,opt,name=max_peer_number" json:"max_peer_number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cluster) GetClusterId() uint64 {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return 0
}

func (m *Cluster) GetMaxPeerNumber() uint32 {
	if m != nil && m.MaxPeerNumber != nil {
		return *m.MaxPeerNumber
	}
	return 0
}

type Node struct {
	NodeId           *uint64 `protobuf:"varint,1,opt,name=node_id" json:"node_id,omitempty"`
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetNodeId() uint64 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *Node) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type Store struct {
	StoreId          *uint64 `protobuf:"varint,1,opt,name=store_id" json:"store_id,omitempty"`
	NodeId           *uint64 `protobuf:"varint,2,opt,name=node_id" json:"node_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Store) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *Store) GetNodeId() uint64 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

type Peer struct {
	PeerId           *uint64 `protobuf:"varint,1,opt,name=peer_id" json:"peer_id,omitempty"`
	NodeId           *uint64 `protobuf:"varint,2,opt,name=node_id" json:"node_id,omitempty"`
	StoreId          *uint64 `protobuf:"varint,3,opt,name=store_id" json:"store_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Peer) GetPeerId() uint64 {
	if m != nil && m.PeerId != nil {
		return *m.PeerId
	}
	return 0
}

func (m *Peer) GetNodeId() uint64 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *Peer) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

type Region struct {
	RegionId *uint64 `protobuf:"varint,1,opt,name=region_id" json:"region_id,omitempty"`
	// Region key range [start_key, end_key).
	StartKey []byte  `protobuf:"bytes,2,opt,name=start_key" json:"start_key,omitempty"`
	EndKey   []byte  `protobuf:"bytes,3,opt,name=end_key" json:"end_key,omitempty"`
	Peers    []*Peer `protobuf:"bytes,4,rep,name=peers" json:"peers,omitempty"`
	// The peer id is generated by outer placement driver incrementally,
	// and we can guarantee that the next generated one is larger than
	// the max_peer_id.
	// If we receive a message which the peer is not in region peers
	// and the peer id is <= max_peer_id, we can be sure that the
	// peer which sends this message is a tombstone peer and can
	// skip the message directly.
	MaxPeerId        *uint64 `protobuf:"varint,5,opt,name=max_peer_id" json:"max_peer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Region) GetRegionId() uint64 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *Region) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *Region) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *Region) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Region) GetMaxPeerId() uint64 {
	if m != nil && m.MaxPeerId != nil {
		return *m.MaxPeerId
	}
	return 0
}

func init() {
	proto.RegisterType((*Cluster)(nil), "metapb.Cluster")
	proto.RegisterType((*Node)(nil), "metapb.Node")
	proto.RegisterType((*Store)(nil), "metapb.Store")
	proto.RegisterType((*Peer)(nil), "metapb.Peer")
	proto.RegisterType((*Region)(nil), "metapb.Region")
}

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x50, 0xbf, 0x4f, 0x85, 0x30,
	0x10, 0xce, 0x93, 0xf2, 0x9e, 0x1c, 0x18, 0xb4, 0x0e, 0x92, 0xb8, 0x90, 0x4e, 0xc4, 0x81, 0xc1,
	0xc1, 0xc1, 0xd5, 0xdd, 0x18, 0xfd, 0x03, 0x48, 0xb1, 0x17, 0x43, 0x94, 0x16, 0xdb, 0x92, 0xe8,
	0x7f, 0x6f, 0x7b, 0xa8, 0x84, 0xe1, 0x4d, 0xfd, 0xfa, 0xdd, 0xf7, 0xe3, 0x72, 0x50, 0x8c, 0xe8,
	0xe5, 0xd4, 0xb7, 0x93, 0x35, 0xde, 0xf0, 0xfd, 0xf2, 0x13, 0x77, 0x70, 0x78, 0xf8, 0x98, 0x9d,
	0x47, 0xcb, 0x39, 0xc0, 0xeb, 0x02, 0xbb, 0x41, 0x55, 0xbb, 0x7a, 0xd7, 0x30, 0x7e, 0x05, 0xe5,
	0x28, 0xbf, 0xba, 0x09, 0x03, 0xa9, 0xe7, 0xb1, 0x47, 0x5b, 0x9d, 0x84, 0xc1, 0x99, 0x68, 0x80,
	0x3d, 0x1a, 0x85, 0xbc, 0x84, 0x83, 0x0e, 0xef, 0xea, 0x08, 0x84, 0x54, 0xca, 0xa2, 0x73, 0xa4,
	0xcc, 0xc4, 0x0d, 0xa4, 0x2f, 0xde, 0x58, 0xe4, 0xe7, 0x70, 0xea, 0x22, 0xd8, 0x68, 0xff, 0xcc,
	0x51, 0xcb, 0xc4, 0x3d, 0xb0, 0xa7, 0x50, 0x15, 0x07, 0x54, 0x79, 0x54, 0xb9, 0x09, 0x4b, 0xc8,
	0xfb, 0x09, 0xfb, 0x67, 0x7c, 0x1b, 0x8c, 0xe6, 0x17, 0x90, 0x59, 0x42, 0xab, 0x3f, 0x50, 0xce,
	0x4b, 0xeb, 0xbb, 0x77, 0xfc, 0xa6, 0x84, 0x22, 0x46, 0xa2, 0x56, 0x44, 0x24, 0x44, 0x5c, 0x43,
	0x1a, 0x4b, 0x5d, 0xc5, 0xea, 0xa4, 0xc9, 0x6f, 0x8b, 0xf6, 0xf7, 0x60, 0xb4, 0xd1, 0x25, 0xe4,
	0xff, 0x87, 0x08, 0xa9, 0x69, 0x4c, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x56, 0x67, 0x01, 0x0d,
	0x53, 0x01, 0x00, 0x00,
}
