// Code generated by protoc-gen-go.
// source: kvrpcpb.proto
// DO NOT EDIT!

/*
Package kvrpcpb is a generated protocol buffer package.

It is generated from these files:
	kvrpcpb.proto

It has these top-level messages:
	KeyAddress
	KvPair
	CmdGetRequest
	CmdGetResponse
	CmdScanRequest
	Item
	CmdScanResponse
	CmdPrewriteRequest
	CmdPrewriteResponse
	CmdCommitRequest
	CmdCommitResponse
	CmdCleanupRequest
	CmdCleanupResponse
	CmdRollbackThenGetRequest
	CmdRollbackThenGetResponse
	CmdCommitThenGetRequest
	CmdCommitThenGetResponse
	Request
	Response
*/
package kvrpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import metapb "github.com/pingcap/kvproto/pkg/metapb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type MessageType int32

const (
	MessageType_CmdGet      MessageType = 1
	MessageType_CmdScan     MessageType = 2
	MessageType_CmdPrewrite MessageType = 3
	MessageType_CmdCommit   MessageType = 4
	MessageType_CmdCleanup  MessageType = 5
	// Below types both use for Get failed. If Get failed, it may be locked.
	// So it tries to clean primary lock(CmdCleanup), and then server will return
	// either committed or rolled back. Finally, client will commit/rollback
	// primary lock and THEN Get again.
	MessageType_CmdRollbackThenGet MessageType = 6
	MessageType_CmdCommitThenGet   MessageType = 7
)

var MessageType_name = map[int32]string{
	1: "CmdGet",
	2: "CmdScan",
	3: "CmdPrewrite",
	4: "CmdCommit",
	5: "CmdCleanup",
	6: "CmdRollbackThenGet",
	7: "CmdCommitThenGet",
}
var MessageType_value = map[string]int32{
	"CmdGet":             1,
	"CmdScan":            2,
	"CmdPrewrite":        3,
	"CmdCommit":          4,
	"CmdCleanup":         5,
	"CmdRollbackThenGet": 6,
	"CmdCommitThenGet":   7,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResultType int32

const (
	ResultType_Ok        ResultType = 1
	ResultType_Retryable ResultType = 2
	ResultType_Locked    ResultType = 3
)

var ResultType_name = map[int32]string{
	1: "Ok",
	2: "Retryable",
	3: "Locked",
}
var ResultType_value = map[string]int32{
	"Ok":        1,
	"Retryable": 2,
	"Locked":    3,
}

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}
func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (x *ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResultType_value, data, "ResultType")
	if err != nil {
		return err
	}
	*x = ResultType(value)
	return nil
}
func (ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CmdCleanupResponse_ResultType int32

const (
	CmdCleanupResponse_Ok         CmdCleanupResponse_ResultType = 1
	CmdCleanupResponse_Retryable  CmdCleanupResponse_ResultType = 2
	CmdCleanupResponse_Committed  CmdCleanupResponse_ResultType = 3
	CmdCleanupResponse_Rolledback CmdCleanupResponse_ResultType = 4
	// Known result type add here.
	CmdCleanupResponse_Other CmdCleanupResponse_ResultType = 9
)

var CmdCleanupResponse_ResultType_name = map[int32]string{
	1: "Ok",
	2: "Retryable",
	3: "Committed",
	4: "Rolledback",
	9: "Other",
}
var CmdCleanupResponse_ResultType_value = map[string]int32{
	"Ok":         1,
	"Retryable":  2,
	"Committed":  3,
	"Rolledback": 4,
	"Other":      9,
}

func (x CmdCleanupResponse_ResultType) Enum() *CmdCleanupResponse_ResultType {
	p := new(CmdCleanupResponse_ResultType)
	*p = x
	return p
}
func (x CmdCleanupResponse_ResultType) String() string {
	return proto.EnumName(CmdCleanupResponse_ResultType_name, int32(x))
}
func (x *CmdCleanupResponse_ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CmdCleanupResponse_ResultType_value, data, "CmdCleanupResponse_ResultType")
	if err != nil {
		return err
	}
	*x = CmdCleanupResponse_ResultType(value)
	return nil
}
func (CmdCleanupResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

type KeyAddress struct {
	Key              []byte       `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	RegionId         *uint64      `protobuf:"varint,2,opt,name=region_id" json:"region_id,omitempty"`
	Peer             *metapb.Peer `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *KeyAddress) Reset()                    { *m = KeyAddress{} }
func (m *KeyAddress) String() string            { return proto.CompactTextString(m) }
func (*KeyAddress) ProtoMessage()               {}
func (*KeyAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyAddress) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyAddress) GetRegionId() uint64 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *KeyAddress) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type KvPair struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	Value            []byte      `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *KvPair) Reset()                    { *m = KvPair{} }
func (m *KvPair) String() string            { return proto.CompactTextString(m) }
func (*KvPair) ProtoMessage()               {}
func (*KvPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KvPair) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *KvPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CmdGetRequest struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	Version          *uint64     `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdGetRequest) Reset()                    { *m = CmdGetRequest{} }
func (m *CmdGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdGetRequest) ProtoMessage()               {}
func (*CmdGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CmdGetRequest) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *CmdGetRequest) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type CmdGetResponse struct {
	ResType          *ResultType `protobuf:"varint,1,opt,name=res_type,enum=kvrpcpb.ResultType,def=1" json:"res_type,omitempty"`
	Value            []byte      `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	PrimaryLock      []byte      `protobuf:"bytes,3,opt,name=primary_lock" json:"primary_lock,omitempty"`
	LockVersion      *uint64     `protobuf:"varint,4,opt,name=lock_version" json:"lock_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdGetResponse) Reset()                    { *m = CmdGetResponse{} }
func (m *CmdGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdGetResponse) ProtoMessage()               {}
func (*CmdGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_CmdGetResponse_ResType ResultType = ResultType_Ok

func (m *CmdGetResponse) GetResType() ResultType {
	if m != nil && m.ResType != nil {
		return *m.ResType
	}
	return Default_CmdGetResponse_ResType
}

func (m *CmdGetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CmdGetResponse) GetPrimaryLock() []byte {
	if m != nil {
		return m.PrimaryLock
	}
	return nil
}

func (m *CmdGetResponse) GetLockVersion() uint64 {
	if m != nil && m.LockVersion != nil {
		return *m.LockVersion
	}
	return 0
}

type CmdScanRequest struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	Limit            *uint32     `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Version          *uint64     `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdScanRequest) Reset()                    { *m = CmdScanRequest{} }
func (m *CmdScanRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdScanRequest) ProtoMessage()               {}
func (*CmdScanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CmdScanRequest) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *CmdScanRequest) GetLimit() uint32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *CmdScanRequest) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type Item struct {
	ResType *ResultType `protobuf:"varint,1,opt,name=res_type,enum=kvrpcpb.ResultType,def=1" json:"res_type,omitempty"`
	Key     []byte      `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value   []byte      `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	// primary_lock_key
	PrimaryLock      []byte  `protobuf:"bytes,4,opt,name=primary_lock" json:"primary_lock,omitempty"`
	LockVersion      *uint64 `protobuf:"varint,5,opt,name=lock_version" json:"lock_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

const Default_Item_ResType ResultType = ResultType_Ok

func (m *Item) GetResType() ResultType {
	if m != nil && m.ResType != nil {
		return *m.ResType
	}
	return Default_Item_ResType
}

func (m *Item) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Item) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Item) GetPrimaryLock() []byte {
	if m != nil {
		return m.PrimaryLock
	}
	return nil
}

func (m *Item) GetLockVersion() uint64 {
	if m != nil && m.LockVersion != nil {
		return *m.LockVersion
	}
	return 0
}

type CmdScanResponse struct {
	// ok if !ok then retry.
	Ok               *bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Results          []*Item `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CmdScanResponse) Reset()                    { *m = CmdScanResponse{} }
func (m *CmdScanResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdScanResponse) ProtoMessage()               {}
func (*CmdScanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CmdScanResponse) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *CmdScanResponse) GetResults() []*Item {
	if m != nil {
		return m.Results
	}
	return nil
}

type CmdPrewriteRequest struct {
	Puts  []*KvPair     `protobuf:"bytes,1,rep,name=puts" json:"puts,omitempty"`
	Dels  []*KeyAddress `protobuf:"bytes,2,rep,name=dels" json:"dels,omitempty"`
	Locks []*KeyAddress `protobuf:"bytes,3,rep,name=locks" json:"locks,omitempty"`
	// primary_lock_key_address
	PrimaryAddress   *KeyAddress `protobuf:"bytes,4,opt,name=primary_address" json:"primary_address,omitempty"`
	StartVersion     *uint64     `protobuf:"varint,5,opt,name=start_version" json:"start_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdPrewriteRequest) Reset()                    { *m = CmdPrewriteRequest{} }
func (m *CmdPrewriteRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdPrewriteRequest) ProtoMessage()               {}
func (*CmdPrewriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CmdPrewriteRequest) GetPuts() []*KvPair {
	if m != nil {
		return m.Puts
	}
	return nil
}

func (m *CmdPrewriteRequest) GetDels() []*KeyAddress {
	if m != nil {
		return m.Dels
	}
	return nil
}

func (m *CmdPrewriteRequest) GetLocks() []*KeyAddress {
	if m != nil {
		return m.Locks
	}
	return nil
}

func (m *CmdPrewriteRequest) GetPrimaryAddress() *KeyAddress {
	if m != nil {
		return m.PrimaryAddress
	}
	return nil
}

func (m *CmdPrewriteRequest) GetStartVersion() uint64 {
	if m != nil && m.StartVersion != nil {
		return *m.StartVersion
	}
	return 0
}

type CmdPrewriteResponse struct {
	Ok *bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// This Item doesn't contain value = 3
	Results          []*Item `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CmdPrewriteResponse) Reset()                    { *m = CmdPrewriteResponse{} }
func (m *CmdPrewriteResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdPrewriteResponse) ProtoMessage()               {}
func (*CmdPrewriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CmdPrewriteResponse) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *CmdPrewriteResponse) GetResults() []*Item {
	if m != nil {
		return m.Results
	}
	return nil
}

type CmdCommitRequest struct {
	StartVersion     *uint64       `protobuf:"varint,1,opt,name=start_version" json:"start_version,omitempty"`
	KeysAddress      []*KeyAddress `protobuf:"bytes,2,rep,name=keys_address" json:"keys_address,omitempty"`
	CommitVersion    *uint64       `protobuf:"varint,3,opt,name=commit_version" json:"commit_version,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CmdCommitRequest) Reset()                    { *m = CmdCommitRequest{} }
func (m *CmdCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdCommitRequest) ProtoMessage()               {}
func (*CmdCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CmdCommitRequest) GetStartVersion() uint64 {
	if m != nil && m.StartVersion != nil {
		return *m.StartVersion
	}
	return 0
}

func (m *CmdCommitRequest) GetKeysAddress() []*KeyAddress {
	if m != nil {
		return m.KeysAddress
	}
	return nil
}

func (m *CmdCommitRequest) GetCommitVersion() uint64 {
	if m != nil && m.CommitVersion != nil {
		return *m.CommitVersion
	}
	return 0
}

type CmdCommitResponse struct {
	Ok               *bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CmdCommitResponse) Reset()                    { *m = CmdCommitResponse{} }
func (m *CmdCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdCommitResponse) ProtoMessage()               {}
func (*CmdCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CmdCommitResponse) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

type CmdCleanupRequest struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	StartVersion     *uint64     `protobuf:"varint,2,opt,name=start_version" json:"start_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdCleanupRequest) Reset()                    { *m = CmdCleanupRequest{} }
func (m *CmdCleanupRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdCleanupRequest) ProtoMessage()               {}
func (*CmdCleanupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CmdCleanupRequest) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *CmdCleanupRequest) GetStartVersion() uint64 {
	if m != nil && m.StartVersion != nil {
		return *m.StartVersion
	}
	return 0
}

type CmdCleanupResponse struct {
	ResType          *CmdCleanupResponse_ResultType `protobuf:"varint,1,opt,name=res_type,enum=kvrpcpb.CmdCleanupResponse_ResultType" json:"res_type,omitempty"`
	CommitVersion    *uint64                        `protobuf:"varint,2,opt,name=commit_version" json:"commit_version,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *CmdCleanupResponse) Reset()                    { *m = CmdCleanupResponse{} }
func (m *CmdCleanupResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdCleanupResponse) ProtoMessage()               {}
func (*CmdCleanupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CmdCleanupResponse) GetResType() CmdCleanupResponse_ResultType {
	if m != nil && m.ResType != nil {
		return *m.ResType
	}
	return CmdCleanupResponse_Ok
}

func (m *CmdCleanupResponse) GetCommitVersion() uint64 {
	if m != nil && m.CommitVersion != nil {
		return *m.CommitVersion
	}
	return 0
}

type CmdRollbackThenGetRequest struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	LockVersion      *uint64     `protobuf:"varint,2,opt,name=lock_version" json:"lock_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdRollbackThenGetRequest) Reset()                    { *m = CmdRollbackThenGetRequest{} }
func (m *CmdRollbackThenGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdRollbackThenGetRequest) ProtoMessage()               {}
func (*CmdRollbackThenGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CmdRollbackThenGetRequest) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *CmdRollbackThenGetRequest) GetLockVersion() uint64 {
	if m != nil && m.LockVersion != nil {
		return *m.LockVersion
	}
	return 0
}

type CmdRollbackThenGetResponse struct {
	Ok               *bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Value            []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CmdRollbackThenGetResponse) Reset()                    { *m = CmdRollbackThenGetResponse{} }
func (m *CmdRollbackThenGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdRollbackThenGetResponse) ProtoMessage()               {}
func (*CmdRollbackThenGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CmdRollbackThenGetResponse) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *CmdRollbackThenGetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CmdCommitThenGetRequest struct {
	KeyAddress       *KeyAddress `protobuf:"bytes,1,opt,name=key_address" json:"key_address,omitempty"`
	LockVersion      *uint64     `protobuf:"varint,2,opt,name=lock_version" json:"lock_version,omitempty"`
	CommitVersion    *uint64     `protobuf:"varint,3,opt,name=commit_version" json:"commit_version,omitempty"`
	GetVersion       *uint64     `protobuf:"varint,4,opt,name=get_version" json:"get_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CmdCommitThenGetRequest) Reset()                    { *m = CmdCommitThenGetRequest{} }
func (m *CmdCommitThenGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdCommitThenGetRequest) ProtoMessage()               {}
func (*CmdCommitThenGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CmdCommitThenGetRequest) GetKeyAddress() *KeyAddress {
	if m != nil {
		return m.KeyAddress
	}
	return nil
}

func (m *CmdCommitThenGetRequest) GetLockVersion() uint64 {
	if m != nil && m.LockVersion != nil {
		return *m.LockVersion
	}
	return 0
}

func (m *CmdCommitThenGetRequest) GetCommitVersion() uint64 {
	if m != nil && m.CommitVersion != nil {
		return *m.CommitVersion
	}
	return 0
}

func (m *CmdCommitThenGetRequest) GetGetVersion() uint64 {
	if m != nil && m.GetVersion != nil {
		return *m.GetVersion
	}
	return 0
}

type CmdCommitThenGetResponse struct {
	Ok               *bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Value            []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CmdCommitThenGetResponse) Reset()                    { *m = CmdCommitThenGetResponse{} }
func (m *CmdCommitThenGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdCommitThenGetResponse) ProtoMessage()               {}
func (*CmdCommitThenGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CmdCommitThenGetResponse) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *CmdCommitThenGetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Request struct {
	Type             *MessageType               `protobuf:"varint,1,opt,name=type,enum=kvrpcpb.MessageType" json:"type,omitempty"`
	CmdGetReq        *CmdGetRequest             `protobuf:"bytes,2,opt,name=cmd_get_req" json:"cmd_get_req,omitempty"`
	CmdScanReq       *CmdScanRequest            `protobuf:"bytes,3,opt,name=cmd_scan_req" json:"cmd_scan_req,omitempty"`
	CmdPrewriteReq   *CmdPrewriteRequest        `protobuf:"bytes,4,opt,name=cmd_prewrite_req" json:"cmd_prewrite_req,omitempty"`
	CmdCommitReq     *CmdCommitRequest          `protobuf:"bytes,5,opt,name=cmd_commit_req" json:"cmd_commit_req,omitempty"`
	CmdCleanupReq    *CmdCleanupRequest         `protobuf:"bytes,6,opt,name=cmd_cleanup_req" json:"cmd_cleanup_req,omitempty"`
	CmdRbGetReq      *CmdRollbackThenGetRequest `protobuf:"bytes,7,opt,name=cmd_rb_get_req" json:"cmd_rb_get_req,omitempty"`
	CmdCommitGetReq  *CmdCommitThenGetRequest   `protobuf:"bytes,8,opt,name=cmd_commit_get_req" json:"cmd_commit_get_req,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Request) GetType() MessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MessageType_CmdGet
}

func (m *Request) GetCmdGetReq() *CmdGetRequest {
	if m != nil {
		return m.CmdGetReq
	}
	return nil
}

func (m *Request) GetCmdScanReq() *CmdScanRequest {
	if m != nil {
		return m.CmdScanReq
	}
	return nil
}

func (m *Request) GetCmdPrewriteReq() *CmdPrewriteRequest {
	if m != nil {
		return m.CmdPrewriteReq
	}
	return nil
}

func (m *Request) GetCmdCommitReq() *CmdCommitRequest {
	if m != nil {
		return m.CmdCommitReq
	}
	return nil
}

func (m *Request) GetCmdCleanupReq() *CmdCleanupRequest {
	if m != nil {
		return m.CmdCleanupReq
	}
	return nil
}

func (m *Request) GetCmdRbGetReq() *CmdRollbackThenGetRequest {
	if m != nil {
		return m.CmdRbGetReq
	}
	return nil
}

func (m *Request) GetCmdCommitGetReq() *CmdCommitThenGetRequest {
	if m != nil {
		return m.CmdCommitGetReq
	}
	return nil
}

type Response struct {
	Type             *MessageType                `protobuf:"varint,1,opt,name=type,enum=kvrpcpb.MessageType" json:"type,omitempty"`
	CmdGetResp       *CmdGetResponse             `protobuf:"bytes,2,opt,name=cmd_get_resp" json:"cmd_get_resp,omitempty"`
	CmdScanResp      *CmdScanResponse            `protobuf:"bytes,3,opt,name=cmd_scan_resp" json:"cmd_scan_resp,omitempty"`
	CmdPrewriteResp  *CmdPrewriteResponse        `protobuf:"bytes,4,opt,name=cmd_prewrite_resp" json:"cmd_prewrite_resp,omitempty"`
	CmdCommitResp    *CmdCommitResponse          `protobuf:"bytes,5,opt,name=cmd_commit_resp" json:"cmd_commit_resp,omitempty"`
	CmdCleanupResp   *CmdCleanupResponse         `protobuf:"bytes,6,opt,name=cmd_cleanup_resp" json:"cmd_cleanup_resp,omitempty"`
	CmdRbGetResp     *CmdRollbackThenGetResponse `protobuf:"bytes,7,opt,name=cmd_rb_get_resp" json:"cmd_rb_get_resp,omitempty"`
	CmdCommitGetResp *CmdCommitThenGetResponse   `protobuf:"bytes,8,opt,name=cmd_commit_get_resp" json:"cmd_commit_get_resp,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Response) GetType() MessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MessageType_CmdGet
}

func (m *Response) GetCmdGetResp() *CmdGetResponse {
	if m != nil {
		return m.CmdGetResp
	}
	return nil
}

func (m *Response) GetCmdScanResp() *CmdScanResponse {
	if m != nil {
		return m.CmdScanResp
	}
	return nil
}

func (m *Response) GetCmdPrewriteResp() *CmdPrewriteResponse {
	if m != nil {
		return m.CmdPrewriteResp
	}
	return nil
}

func (m *Response) GetCmdCommitResp() *CmdCommitResponse {
	if m != nil {
		return m.CmdCommitResp
	}
	return nil
}

func (m *Response) GetCmdCleanupResp() *CmdCleanupResponse {
	if m != nil {
		return m.CmdCleanupResp
	}
	return nil
}

func (m *Response) GetCmdRbGetResp() *CmdRollbackThenGetResponse {
	if m != nil {
		return m.CmdRbGetResp
	}
	return nil
}

func (m *Response) GetCmdCommitGetResp() *CmdCommitThenGetResponse {
	if m != nil {
		return m.CmdCommitGetResp
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyAddress)(nil), "kvrpcpb.KeyAddress")
	proto.RegisterType((*KvPair)(nil), "kvrpcpb.KvPair")
	proto.RegisterType((*CmdGetRequest)(nil), "kvrpcpb.CmdGetRequest")
	proto.RegisterType((*CmdGetResponse)(nil), "kvrpcpb.CmdGetResponse")
	proto.RegisterType((*CmdScanRequest)(nil), "kvrpcpb.CmdScanRequest")
	proto.RegisterType((*Item)(nil), "kvrpcpb.Item")
	proto.RegisterType((*CmdScanResponse)(nil), "kvrpcpb.CmdScanResponse")
	proto.RegisterType((*CmdPrewriteRequest)(nil), "kvrpcpb.CmdPrewriteRequest")
	proto.RegisterType((*CmdPrewriteResponse)(nil), "kvrpcpb.CmdPrewriteResponse")
	proto.RegisterType((*CmdCommitRequest)(nil), "kvrpcpb.CmdCommitRequest")
	proto.RegisterType((*CmdCommitResponse)(nil), "kvrpcpb.CmdCommitResponse")
	proto.RegisterType((*CmdCleanupRequest)(nil), "kvrpcpb.CmdCleanupRequest")
	proto.RegisterType((*CmdCleanupResponse)(nil), "kvrpcpb.CmdCleanupResponse")
	proto.RegisterType((*CmdRollbackThenGetRequest)(nil), "kvrpcpb.CmdRollbackThenGetRequest")
	proto.RegisterType((*CmdRollbackThenGetResponse)(nil), "kvrpcpb.CmdRollbackThenGetResponse")
	proto.RegisterType((*CmdCommitThenGetRequest)(nil), "kvrpcpb.CmdCommitThenGetRequest")
	proto.RegisterType((*CmdCommitThenGetResponse)(nil), "kvrpcpb.CmdCommitThenGetResponse")
	proto.RegisterType((*Request)(nil), "kvrpcpb.Request")
	proto.RegisterType((*Response)(nil), "kvrpcpb.Response")
	proto.RegisterEnum("kvrpcpb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("kvrpcpb.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("kvrpcpb.CmdCleanupResponse_ResultType", CmdCleanupResponse_ResultType_name, CmdCleanupResponse_ResultType_value)
}

var fileDescriptor0 = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x4f, 0xdb, 0x58,
	0x14, 0x55, 0x62, 0xe7, 0xeb, 0x3a, 0x1f, 0xc6, 0x61, 0x20, 0x64, 0xbe, 0xc0, 0x23, 0x8d, 0x80,
	0x99, 0x01, 0x0d, 0x15, 0xa2, 0x42, 0xb4, 0x12, 0x62, 0xd1, 0x0f, 0x8a, 0x40, 0x94, 0x55, 0xbb,
	0x88, 0x9c, 0xf8, 0x09, 0xa2, 0x38, 0xb1, 0x79, 0x7e, 0x49, 0x95, 0x7d, 0xd5, 0x1f, 0xd2, 0x7f,
	0xd0, 0x45, 0xd7, 0xfd, 0x6b, 0xbd, 0x7e, 0xcf, 0x36, 0x2f, 0xb6, 0x43, 0x09, 0xea, 0xd2, 0xce,
	0x3d, 0xf7, 0x9e, 0x7b, 0xce, 0xf5, 0x09, 0xd4, 0x06, 0x13, 0xea, 0xf5, 0xbc, 0xee, 0x8e, 0x47,
	0x5d, 0xe6, 0x1a, 0xa5, 0xf0, 0xb1, 0x5d, 0x1d, 0x12, 0x66, 0x45, 0xaf, 0xcd, 0x97, 0x00, 0xa7,
	0x64, 0x7a, 0x6c, 0xdb, 0x94, 0xf8, 0xbe, 0xa1, 0x81, 0x32, 0x20, 0xd3, 0x56, 0x6e, 0x3d, 0xb7,
	0x59, 0x35, 0x96, 0xa0, 0x42, 0xc9, 0x75, 0xdf, 0x1d, 0x75, 0xfa, 0x76, 0x2b, 0x8f, 0xaf, 0x54,
	0xa3, 0x0d, 0xaa, 0x47, 0x08, 0x6d, 0x29, 0xf8, 0xa4, 0xed, 0x55, 0x77, 0xc2, 0x56, 0x17, 0xf8,
	0xce, 0x3c, 0x86, 0xe2, 0xe9, 0xe4, 0xc2, 0xea, 0x53, 0x63, 0x13, 0x34, 0xec, 0xd2, 0xb1, 0x44,
	0x53, 0xde, 0x4d, 0xdb, 0x6b, 0xee, 0x44, 0x7c, 0xa4, 0x79, 0x35, 0x28, 0x4c, 0x2c, 0x67, 0x4c,
	0x78, 0xfb, 0xaa, 0xf9, 0x1a, 0x6a, 0x27, 0x43, 0xfb, 0x05, 0x61, 0x97, 0xe4, 0x76, 0x4c, 0x7c,
	0xb6, 0x40, 0xa7, 0x06, 0x94, 0x26, 0x84, 0xfa, 0xc8, 0x56, 0x50, 0x35, 0x27, 0x50, 0x8f, 0x7a,
	0xf9, 0x9e, 0x3b, 0xf2, 0x89, 0xb1, 0x05, 0x65, 0x2c, 0xed, 0xb0, 0xa9, 0x47, 0x78, 0xa7, 0xba,
	0xd4, 0x09, 0x8b, 0xc6, 0x0e, 0xbb, 0xc2, 0x9f, 0x0e, 0xf3, 0xe7, 0x83, 0x04, 0x2f, 0x63, 0x19,
	0xaa, 0x1e, 0xed, 0x0f, 0x2d, 0x3a, 0xed, 0x38, 0x6e, 0x6f, 0xc0, 0xd7, 0xe7, 0x6f, 0x83, 0xa7,
	0x4e, 0x34, 0x57, 0xe5, 0x73, 0xdf, 0xf1, 0xb9, 0x6f, 0x7b, 0xd6, 0x68, 0xf1, 0x25, 0x70, 0xac,
	0xd3, 0x1f, 0xf6, 0x19, 0x1f, 0x5b, 0x93, 0x77, 0x52, 0x78, 0xef, 0x29, 0xa8, 0xaf, 0x18, 0x19,
	0x2e, 0xb2, 0x49, 0xe8, 0xa8, 0xd8, 0x23, 0x5e, 0x4b, 0xc9, 0x5c, 0x4b, 0xcd, 0x5c, 0xab, 0xc0,
	0x47, 0x3f, 0x83, 0x46, 0xbc, 0x56, 0xa8, 0x27, 0x40, 0xde, 0x1d, 0xf0, 0xf9, 0x65, 0xe3, 0x0f,
	0x28, 0x51, 0x3e, 0xd8, 0xc7, 0x51, 0x0a, 0xee, 0x57, 0x8b, 0x09, 0x05, 0x8c, 0xcd, 0x6f, 0x39,
	0x30, 0x10, 0x7f, 0x41, 0xc9, 0x07, 0xda, 0x67, 0x24, 0x92, 0xe6, 0x77, 0xbc, 0xa7, 0x31, 0x0b,
	0x34, 0x09, 0x30, 0x8d, 0x3b, 0x4d, 0xc4, 0x21, 0x6d, 0x80, 0x6a, 0x13, 0x27, 0x6a, 0x99, 0x29,
	0x99, 0x89, 0x92, 0x21, 0x5b, 0x1f, 0x57, 0x9a, 0x5b, 0xf3, 0x2f, 0x34, 0xa2, 0x3d, 0x23, 0x13,
	0xd4, 0xf9, 0x26, 0xfc, 0x02, 0x35, 0x9f, 0x59, 0x94, 0x25, 0x04, 0x38, 0x86, 0xe6, 0xcc, 0x02,
	0x8f, 0x10, 0xc1, 0x01, 0x1d, 0x5b, 0x9c, 0xb8, 0x43, 0xb4, 0x38, 0x52, 0x20, 0x35, 0x2d, 0xc7,
	0x3f, 0xb4, 0x2d, 0xa8, 0xa2, 0x6d, 0x7e, 0xcc, 0xf7, 0x1e, 0x05, 0x56, 0xa0, 0xde, 0xe3, 0x2d,
	0x3b, 0xb3, 0xc7, 0xf2, 0x27, 0x2c, 0x49, 0xd3, 0xd2, 0x74, 0xcd, 0x2b, 0x51, 0xe0, 0x10, 0x6b,
	0x34, 0xf6, 0x16, 0x3f, 0xd6, 0x14, 0x73, 0xf1, 0xdd, 0x7d, 0x15, 0x4e, 0xc7, 0x6d, 0xc3, 0xc1,
	0x4f, 0x53, 0x27, 0xfb, 0x77, 0xdc, 0x34, 0x5d, 0x2e, 0x5d, 0x71, 0xc6, 0x7e, 0x62, 0xd0, 0x19,
	0x80, 0x54, 0x55, 0x04, 0xbc, 0x76, 0x3d, 0x87, 0x27, 0x5e, 0xb9, 0x24, 0x8c, 0x4e, 0xad, 0xae,
	0x43, 0xf4, 0x7c, 0xf0, 0x28, 0x14, 0x60, 0xc4, 0xd6, 0x15, 0xa3, 0x8e, 0x18, 0xd7, 0x71, 0x88,
	0xdd, 0xb5, 0x7a, 0x03, 0x5d, 0x35, 0x2a, 0x50, 0x38, 0x67, 0x37, 0x84, 0xea, 0x15, 0xf3, 0x3d,
	0xac, 0x21, 0x8f, 0xe0, 0xd7, 0xe0, 0xb7, 0xab, 0x1b, 0x32, 0x7a, 0x54, 0x0e, 0x25, 0xbf, 0x1e,
	0xc1, 0xf5, 0x00, 0xda, 0x59, 0xcd, 0x33, 0x6e, 0x28, 0x91, 0x88, 0x9f, 0x72, 0xb0, 0x1a, 0xbb,
	0xf8, 0x73, 0x49, 0xcd, 0x3b, 0x1c, 0xa3, 0x09, 0xda, 0x35, 0x61, 0x89, 0x58, 0xdb, 0x87, 0x56,
	0x9a, 0xc7, 0x8f, 0xf9, 0x7f, 0x56, 0xa0, 0x14, 0xf1, 0x35, 0x41, 0x95, 0xec, 0x5f, 0x8e, 0x89,
	0x9e, 0x21, 0x45, 0xeb, 0x9a, 0x70, 0x1b, 0xff, 0x01, 0xad, 0x37, 0xb4, 0x3b, 0xc1, 0x7c, 0x4a,
	0x6e, 0x79, 0x13, 0x6d, 0x6f, 0x45, 0xbe, 0x14, 0x49, 0x80, 0xff, 0xa0, 0x1a, 0x14, 0xfb, 0x18,
	0x4a, 0xbc, 0x5a, 0xfc, 0x2b, 0xad, 0xca, 0xd5, 0x72, 0x0e, 0xef, 0x83, 0x1e, 0x94, 0x7b, 0xe1,
	0x27, 0xcc, 0x21, 0x22, 0x07, 0x7e, 0x95, 0x21, 0xc9, 0x8c, 0xfa, 0x1f, 0x65, 0x42, 0x58, 0x28,
	0x55, 0x00, 0x2a, 0x70, 0xd0, 0xda, 0xcc, 0xfd, 0xce, 0x7c, 0xd4, 0x4f, 0xa0, 0xc1, 0x21, 0xe2,
	0xa8, 0x39, 0xa6, 0xc8, 0x31, 0xed, 0xcc, 0x9b, 0x17, 0xa0, 0x43, 0x31, 0x87, 0x76, 0xe3, 0xed,
	0x4b, 0x1c, 0x63, 0xca, 0x98, 0x39, 0xf7, 0x79, 0x04, 0x86, 0xc4, 0x31, 0xc2, 0x97, 0x39, 0x7e,
	0x3d, 0xcd, 0x73, 0x16, 0x6d, 0x7e, 0x51, 0xa0, 0x1c, 0x9b, 0xf9, 0x10, 0x97, 0x42, 0xe1, 0xc5,
	0x1c, 0xdf, 0x0b, 0x6d, 0x5a, 0x4d, 0xd9, 0x14, 0xb6, 0xdc, 0x85, 0x9a, 0xe4, 0x13, 0xd6, 0x0b,
	0xa3, 0x5a, 0x69, 0xa3, 0x42, 0xc0, 0x01, 0x2c, 0x25, 0x9c, 0x42, 0x90, 0xb0, 0xea, 0xb7, 0x6c,
	0xab, 0x42, 0x60, 0x24, 0x7c, 0xe4, 0x15, 0xc2, 0x0a, 0x19, 0xc2, 0xcf, 0x66, 0x62, 0x78, 0x17,
	0x77, 0x6e, 0x21, 0xaa, 0x98, 0xbe, 0x8b, 0x64, 0xa2, 0x1d, 0x89, 0x59, 0xb1, 0x5f, 0x88, 0x12,
	0x86, 0xfd, 0x75, 0xaf, 0x61, 0x21, 0xfa, 0x39, 0x34, 0x53, 0x8e, 0x61, 0x07, 0x61, 0xd9, 0xc6,
	0x3d, 0x96, 0x09, 0xfc, 0xf6, 0xc7, 0x1c, 0x68, 0xb2, 0x25, 0x00, 0x45, 0xa1, 0x3a, 0x66, 0xa0,
	0x06, 0xa5, 0x50, 0x51, 0x4c, 0xc0, 0x06, 0x68, 0x92, 0x52, 0x98, 0x81, 0x41, 0x24, 0x46, 0x5d,
	0x31, 0x02, 0x31, 0x12, 0xef, 0x96, 0xd3, 0x0b, 0x98, 0x0a, 0x46, 0x9a, 0xb6, 0x5e, 0xc4, 0x0c,
	0xd1, 0x93, 0x64, 0xf4, 0xd2, 0xf6, 0xee, 0x43, 0x42, 0x18, 0xb9, 0xbd, 0xc1, 0xf8, 0x09, 0x12,
	0xf8, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x64, 0x10, 0x57, 0x96, 0x0a, 0x00, 0x00,
}
